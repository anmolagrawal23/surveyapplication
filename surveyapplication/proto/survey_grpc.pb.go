// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.17.3
// source: survey.proto

package surveyservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SurveyServiceClient is the client API for SurveyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SurveyServiceClient interface {
	CreateSurvey(ctx context.Context, in *SurveyDesc, opts ...grpc.CallOption) (*SurveyID, error)
	SendQuestions(ctx context.Context, opts ...grpc.CallOption) (SurveyService_SendQuestionsClient, error)
	SendResponse(ctx context.Context, opts ...grpc.CallOption) (SurveyService_SendResponseClient, error)
	ReceiveResponse(ctx context.Context, in *SurveyID, opts ...grpc.CallOption) (SurveyService_ReceiveResponseClient, error)
}

type surveyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSurveyServiceClient(cc grpc.ClientConnInterface) SurveyServiceClient {
	return &surveyServiceClient{cc}
}

func (c *surveyServiceClient) CreateSurvey(ctx context.Context, in *SurveyDesc, opts ...grpc.CallOption) (*SurveyID, error) {
	out := new(SurveyID)
	err := c.cc.Invoke(ctx, "/main.SurveyService/CreateSurvey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) SendQuestions(ctx context.Context, opts ...grpc.CallOption) (SurveyService_SendQuestionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &SurveyService_ServiceDesc.Streams[0], "/main.SurveyService/SendQuestions", opts...)
	if err != nil {
		return nil, err
	}
	x := &surveyServiceSendQuestionsClient{stream}
	return x, nil
}

type SurveyService_SendQuestionsClient interface {
	Send(*Question) error
	CloseAndRecv() (*EmptyMessage, error)
	grpc.ClientStream
}

type surveyServiceSendQuestionsClient struct {
	grpc.ClientStream
}

func (x *surveyServiceSendQuestionsClient) Send(m *Question) error {
	return x.ClientStream.SendMsg(m)
}

func (x *surveyServiceSendQuestionsClient) CloseAndRecv() (*EmptyMessage, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EmptyMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *surveyServiceClient) SendResponse(ctx context.Context, opts ...grpc.CallOption) (SurveyService_SendResponseClient, error) {
	stream, err := c.cc.NewStream(ctx, &SurveyService_ServiceDesc.Streams[1], "/main.SurveyService/SendResponse", opts...)
	if err != nil {
		return nil, err
	}
	x := &surveyServiceSendResponseClient{stream}
	return x, nil
}

type SurveyService_SendResponseClient interface {
	Send(*Response) error
	CloseAndRecv() (*EmptyMessage, error)
	grpc.ClientStream
}

type surveyServiceSendResponseClient struct {
	grpc.ClientStream
}

func (x *surveyServiceSendResponseClient) Send(m *Response) error {
	return x.ClientStream.SendMsg(m)
}

func (x *surveyServiceSendResponseClient) CloseAndRecv() (*EmptyMessage, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EmptyMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *surveyServiceClient) ReceiveResponse(ctx context.Context, in *SurveyID, opts ...grpc.CallOption) (SurveyService_ReceiveResponseClient, error) {
	stream, err := c.cc.NewStream(ctx, &SurveyService_ServiceDesc.Streams[2], "/main.SurveyService/ReceiveResponse", opts...)
	if err != nil {
		return nil, err
	}
	x := &surveyServiceReceiveResponseClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SurveyService_ReceiveResponseClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type surveyServiceReceiveResponseClient struct {
	grpc.ClientStream
}

func (x *surveyServiceReceiveResponseClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SurveyServiceServer is the server API for SurveyService service.
// All implementations must embed UnimplementedSurveyServiceServer
// for forward compatibility
type SurveyServiceServer interface {
	CreateSurvey(context.Context, *SurveyDesc) (*SurveyID, error)
	SendQuestions(SurveyService_SendQuestionsServer) error
	SendResponse(SurveyService_SendResponseServer) error
	ReceiveResponse(*SurveyID, SurveyService_ReceiveResponseServer) error
	mustEmbedUnimplementedSurveyServiceServer()
}

// UnimplementedSurveyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSurveyServiceServer struct {
}

func (UnimplementedSurveyServiceServer) CreateSurvey(context.Context, *SurveyDesc) (*SurveyID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSurvey not implemented")
}
func (UnimplementedSurveyServiceServer) SendQuestions(SurveyService_SendQuestionsServer) error {
	return status.Errorf(codes.Unimplemented, "method SendQuestions not implemented")
}
func (UnimplementedSurveyServiceServer) SendResponse(SurveyService_SendResponseServer) error {
	return status.Errorf(codes.Unimplemented, "method SendResponse not implemented")
}
func (UnimplementedSurveyServiceServer) ReceiveResponse(*SurveyID, SurveyService_ReceiveResponseServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveResponse not implemented")
}
func (UnimplementedSurveyServiceServer) mustEmbedUnimplementedSurveyServiceServer() {}

// UnsafeSurveyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SurveyServiceServer will
// result in compilation errors.
type UnsafeSurveyServiceServer interface {
	mustEmbedUnimplementedSurveyServiceServer()
}

func RegisterSurveyServiceServer(s grpc.ServiceRegistrar, srv SurveyServiceServer) {
	s.RegisterService(&SurveyService_ServiceDesc, srv)
}

func _SurveyService_CreateSurvey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SurveyDesc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).CreateSurvey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.SurveyService/CreateSurvey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).CreateSurvey(ctx, req.(*SurveyDesc))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyService_SendQuestions_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SurveyServiceServer).SendQuestions(&surveyServiceSendQuestionsServer{stream})
}

type SurveyService_SendQuestionsServer interface {
	SendAndClose(*EmptyMessage) error
	Recv() (*Question, error)
	grpc.ServerStream
}

type surveyServiceSendQuestionsServer struct {
	grpc.ServerStream
}

func (x *surveyServiceSendQuestionsServer) SendAndClose(m *EmptyMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *surveyServiceSendQuestionsServer) Recv() (*Question, error) {
	m := new(Question)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SurveyService_SendResponse_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SurveyServiceServer).SendResponse(&surveyServiceSendResponseServer{stream})
}

type SurveyService_SendResponseServer interface {
	SendAndClose(*EmptyMessage) error
	Recv() (*Response, error)
	grpc.ServerStream
}

type surveyServiceSendResponseServer struct {
	grpc.ServerStream
}

func (x *surveyServiceSendResponseServer) SendAndClose(m *EmptyMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *surveyServiceSendResponseServer) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SurveyService_ReceiveResponse_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SurveyID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SurveyServiceServer).ReceiveResponse(m, &surveyServiceReceiveResponseServer{stream})
}

type SurveyService_ReceiveResponseServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type surveyServiceReceiveResponseServer struct {
	grpc.ServerStream
}

func (x *surveyServiceReceiveResponseServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

// SurveyService_ServiceDesc is the grpc.ServiceDesc for SurveyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SurveyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.SurveyService",
	HandlerType: (*SurveyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSurvey",
			Handler:    _SurveyService_CreateSurvey_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendQuestions",
			Handler:       _SurveyService_SendQuestions_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SendResponse",
			Handler:       _SurveyService_SendResponse_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ReceiveResponse",
			Handler:       _SurveyService_ReceiveResponse_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "survey.proto",
}
